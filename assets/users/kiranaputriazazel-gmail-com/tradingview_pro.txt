// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ============================================================== © AlgoAlpha ==============================================================
// ============================================================== © editor: Σ ==============================================================

//@version=5
indicator("15BTCETHONLY", "Σ Factor - 15BTCETHONLY", overlay = true, max_labels_count = 500)
import TradingView/ta/7
atr_len = input.int(5, "ATR Length", group = "SuperTrend Settings")
fact = input.float(2, "SuperTrend Factor", group = "SuperTrend Settings")
training_data_period = input.int(25, "Training Data Length", group = "K-Means Settings")
highvol = input.float(0.75, "Initial High volatility Percentile Guess", maxval = 1, group = "K-Means Settings", tooltip = "The initial guess of where the potential 'high volatility' area is, a value of 0.75 will take the 75th percentile of the range of ATR values over the training data period")
midvol = input.float(0.5, "Initial Medium volatility Percentile Guess", maxval = 1, group = "K-Means Settings", tooltip = "The initial guess of where the potential 'medium volatility' area is, a value of 0.5 will take the 50th percentile of the range of ATR values over the training data period")
lowvol = input.float(0.25, "Initial Low volatility Percentile Guess", maxval = 1, group = "K-Means Settings", tooltip = "The initial guess of where the potential 'low volatility' area is, a value of 0.25 will take the 25th percentile of the range of ATR values over the training data period")
t1 = input.int(70, "Transparency 1", maxval = 100, minval = 0, group = "Appearance")
t2 = input.int(95, "Transparency 2", maxval = 100, minval = 0, group = "Appearance")
green = input.color(#00ffbb, "Bullish Color", group = "Appearance")
red = input.color(#ff1100, "Bearish Color", group = "Appearance")

pine_supertrend(factor, atr) =>
    src = hl2
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])

    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int _direction = na
    float superTrend = na
    prevSuperTrend = superTrend[1]
    if na(atr[1])
        _direction := 1
    else if prevSuperTrend == prevUpperBand
        _direction := close > upperBand ? -1 : 1
    else
        _direction := close < lowerBand ? 1 : -1
    superTrend := _direction == -1 ? lowerBand : upperBand
    [superTrend, _direction]

volatility = ta.atr(atr_len)

upper = ta.highest(volatility, training_data_period)
lower = ta.lowest(volatility, training_data_period)

high_volatility = lower + (upper-lower) * highvol
medium_volatility = lower + (upper-lower) * midvol
low_volatility = lower + (upper-lower) * lowvol

iterations = 0

size_a = 0
size_b = 0
size_c = 0

hv = array.new_float()
mv = array.new_float()
lv = array.new_float()
amean = array.new_float(1,high_volatility)
bmean = array.new_float(1,medium_volatility)
cmean = array.new_float(1,low_volatility)

if nz(volatility) > 0 and bar_index >= training_data_period-1

    while ((amean.size() == 1 ? true : (amean.first() != amean.get(1))) or (bmean.size() == 1 ? true : (bmean.first() != bmean.get(1))) or (cmean.size() == 1 ? true : (cmean.first() != cmean.get(1))))
        hv.clear()
        mv.clear()
        lv.clear()
        for i = training_data_period-1 to 0
            _1 = math.abs(volatility[i] - amean.first())
            _2 = math.abs(volatility[i] - bmean.first())
            _3 = math.abs(volatility[i] - cmean.first())
            if _1 < _2 and _1 < _3
                hv.unshift(volatility[i])

            if _2 < _1 and _2 < _3
                mv.unshift(volatility[i])

            if _3 < _1 and _3 < _2
                lv.unshift(volatility[i])
        
        amean.unshift(hv.avg())
        bmean.unshift(mv.avg())
        cmean.unshift(lv.avg())
        size_a := hv.size()
        size_b := mv.size()
        size_c := lv.size()
        iterations := iterations + 1

hv_new = amean.first()
mv_new = bmean.first()
lv_new = cmean.first()
vdist_a = math.abs(volatility - hv_new)
vdist_b = math.abs(volatility - mv_new)
vdist_c = math.abs(volatility - lv_new)

distances = array.new_float()
centroids = array.new_float()

distances.push(vdist_a)
distances.push(vdist_b)
distances.push(vdist_c)

centroids.push(hv_new)
centroids.push(mv_new)
centroids.push(lv_new)

cluster = distances.indexof(distances.min()) // 0 for high, 1 for medium, 2 for low
assigned_centroid = cluster == -1 ? na : centroids.get(cluster)

[ST, dir] = pine_supertrend(fact, assigned_centroid)
upTrend = plot(close > ST ? ST : na, color = color.new(green, t1), style = plot.style_linebr) //, force_overlay = true
downTrend = plot(close < ST ? ST : na, color = color.new(red, t1), style = plot.style_linebr, force_overlay = false) //, force_overlay = true
bodyMiddle = plot(barstate.isfirst ? na : (open + close) / 2, "Body Middle",display = display.none)

fill(bodyMiddle, upTrend, (open + close) / 2, ST, color.new(green, t2), color.new(green, t1))
fill(bodyMiddle, downTrend, ST, (open + close) / 2, color.new(red, t1), color.new(red, t2))

plotshape(ta.crossunder(dir, 0) ? ST : na, "Bullish Trend", shape.labelup, location.absolute, green, text = "▲", textcolor = chart.fg_color, size = size.small)
plotshape(ta.crossover(dir, 0) ? ST : na, "Bearish Trend", shape.labeldown, location.absolute, red, text = "▼", textcolor = chart.fg_color, size = size.small)

label.new(bar_index, dir > 0 ? ST + ta.atr(7) : ST - ta.atr(7), text = str.tostring(4 - (cluster + 1)), style = label.style_none, textcolor = color.from_gradient(cluster + 1, 1, 3, color.new(dir > 0 ? red : green, 30), color.new(dir > 0 ? red : green, 90)))

if barstate.islast
    var data_table = table.new(position=position.top_right, columns=4, rows=4, bgcolor = chart.bg_color, border_width=1, border_color = chart.fg_color, frame_color = chart.fg_color, frame_width = 1)
    table.cell(data_table, text_halign=text.align_center, column=0, row=0, text="Cluster Number (Volatility Level)", text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=1, row=0, text="Cluster Centroid (ATR)", text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=2, row=0, text="Cluster Size (No. of Data Points in Each Cluster)", text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=3, row=0, text="Current Volatility", text_color = chart.fg_color)

    table.cell(data_table, text_halign=text.align_center, column=0, row=1, text="3 (High)", text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=0, row=2, text= "2 (Medium)", text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=0, row=3, text= "1 (Low)", text_color = chart.fg_color)

    table.cell(data_table, text_halign=text.align_center, column=1, row=1, text=str.format("{0,number,#.##}", hv_new), text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=1, row=2, text=str.format("{0,number,#.##}", mv_new), text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=1, row=3, text=str.format("{0,number,#.##}", lv_new), text_color = chart.fg_color)

    table.cell(data_table, text_halign=text.align_center, column=2, row=1, text=str.format("{0,number,#.##}", size_c), text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=2, row=2, text=str.format("{0,number,#.##}", size_b), text_color = chart.fg_color)
    table.cell(data_table, text_halign=text.align_center, column=2, row=3, text=str.format("{0,number,#.##}", size_a), text_color = chart.fg_color)

    table.cell(data_table, text_halign=text.align_center, column=3, row=1, text="HIGH " + "(ATR: " + str.format("{0,number,#.##}", volatility) + ")", text_color = chart.bg_color)
    table.cell(data_table, text_halign=text.align_center, column=3, row=2, text="MEDIUM " + "(ATR: " + str.format("{0,number,#.##}", volatility) + ")", text_color = chart.bg_color)
    table.cell(data_table, text_halign=text.align_center, column=3, row=3, text="LOW " + "(ATR: " + str.format("{0,number,#.##}", volatility) + ")", text_color = chart.bg_color)

    if cluster == 0
        data_table.cell_set_bgcolor(3, 1, chart.fg_color)
    else
        data_table.cell_set_bgcolor(3, 1, chart.bg_color)

    if cluster == 1
        data_table.cell_set_bgcolor(3, 2, chart.fg_color)
    else
        data_table.cell_set_bgcolor(3, 2, chart.bg_color)

    if cluster == 2
        data_table.cell_set_bgcolor(3, 3, chart.fg_color)
    else
        data_table.cell_set_bgcolor(3, 3, chart.bg_color)


// Label & Alert =====

// Input untuk persentase stop loss dan profit target
stop_loss_percentage = input.float(2, title="Stop Loss (%)", step=0.1) / 100
profit_target_percentage = input.float(2, title="Profit Target (%)", step=0.1) / 100

// Variabel untuk menyimpan harga entry dan arah tren
var float entry_price = na
var int current_trend = na // 1 = Bullish, -1 = Bearish

// Variabel stateful untuk melacak SL dan TP
var bool sl_bull_triggered = false
var bool tp_bull_triggered = false
var bool sl_bear_triggered = false
var bool tp_bear_triggered = false
var bool trade_start = false
var bool trade_ended = false

atr_offset = ta.atr(14) * 2
offset = 5

is_up = close > close[1] // Candle bergerak ke atas
is_down = close < close[1] // Candle bergerak ke bawah

var int crossunder_bar_index = na

if (ta.crossunder(dir, 0) and barstate.isconfirmed)
    crossunder_bar_index := bar_index

var int crossover_bar_index = na

if (ta.crossover(dir, 0) and barstate.isconfirmed)
    crossover_bar_index := bar_index
	
// Hitung level stop loss dan profit target
stop_loss_level = current_trend == 1 ? entry_price * (1 - stop_loss_percentage) : entry_price * (1 + stop_loss_percentage)
profit_target_level = current_trend == 1 ? entry_price * (1 + profit_target_percentage) : entry_price * (1 - profit_target_percentage)

// Hitung total persentase dari entry ke stop loss
total_sl_percentage = current_trend == 1 ? ((entry_price - stop_loss_level) / entry_price) * 100 : ((stop_loss_level - entry_price) / entry_price) * 100	
total_tp_percentage = current_trend == -1 ? ((entry_price - profit_target_level) / entry_price) * 100 : ((profit_target_level - entry_price) / entry_price) * 100

total_exit_percentage = current_trend == 1 ? ((close - entry_price) / entry_price) * 100 : ((entry_price - close) / entry_price) * 100

// Deteksi kondisi SL dan TP untuk tren bullish
stop_loss_bull = current_trend == 1 and close <= stop_loss_level and not sl_bull_triggered and not trade_ended
take_profit_bull = current_trend == 1 and close >= profit_target_level and not tp_bull_triggered and not trade_ended

// Deteksi kondisi SL dan TP untuk tren bearish
stop_loss_bear = current_trend == -1 and close >= stop_loss_level and not sl_bear_triggered and not trade_ended
take_profit_bear = current_trend == -1 and close <= profit_target_level and not tp_bear_triggered and not trade_ended

// Kondisi
entry_bull = not na(crossunder_bar_index) and bar_index == crossunder_bar_index + 2 and (cluster == 2 or cluster == 1) and barstate.isconfirmed
entry_bear = not na(crossover_bar_index) and bar_index == crossover_bar_index + 2 and (cluster == 2 or cluster == 1) and barstate.isconfirmed
exit_bull = not na(crossover_bar_index) and bar_index == crossover_bar_index + 1 and trade_start and barstate.isconfirmed
exit_bear = not na(crossunder_bar_index) and bar_index == crossunder_bar_index + 1 and trade_start and barstate.isconfirmed
tp_bull = dir < 0 and take_profit_bull and not ta.crossunder(dir, 0)
tp_bear = dir > 0 and take_profit_bear and not ta.crossover(dir, 0)
sl_bull = stop_loss_bull and not ta.crossunder(dir, 0)
sl_bear = stop_loss_bear and not ta.crossover(dir, 0)

// Deteksi tren baru dan reset harga entry serta trigger
if (entry_bull)
    entry_price := close
    current_trend := 1
    sl_bull_triggered := false
    tp_bull_triggered := false
    trade_start := true
    trade_ended := false

if (entry_bear) 
    entry_price := close
    current_trend := -1
    sl_bear_triggered := false
    tp_bear_triggered := false
    trade_start := true
    trade_ended := false

// Debugging: Plot level stop loss dan profit target
plot(entry_price, color=color.gray, title="Entry Price", linewidth=1, style=plot.style_linebr)
plot(stop_loss_level, color=color.red, title="Stop Loss Level", linewidth=1, style=plot.style_linebr)
plot(profit_target_level, color=color.green, title="Profit Target Level", linewidth=1, style=plot.style_linebr)

// Alerts Label for Trend Shifts =====

// Bullish Trend Shift Alerts Label
	
if (entry_bull)
    label.new(x=bar_index, y=low - offset, text="🔵 Entry Bull", style=label.style_label_up, color=color.new(color.green, 70), textcolor=color.white, size=size.normal)
	trade_start := true
	crossunder_bar_index := na
	
if (exit_bull)
    label.new( x=bar_index, y=low - offset, text="Exit Bull\n " + str.tostring(total_exit_percentage, "#.###") + "%", style=label.style_label_up, color=color.new(color.black, 70), textcolor=color.yellow, size=size.large)
	trade_ended := true
	trade_start := false
	crossunder_bar_index := na

if (tp_bull)
	label.new(x=bar_index, y=high + atr_offset, text="Bull TP\n " + str.tostring(total_exit_percentage, "#.###") + "%", style=label.style_label_down, color=color.new(color.white, 30), textcolor=color.green, size=size.large)
	tp_bull_triggered := true
	trade_ended := true
	trade_start := false
	
if (sl_bull)
	label.new(x=bar_index, y=low - atr_offset, text="Bull SL\n " + str.tostring(total_exit_percentage, "#.###") + "%", style=label.style_label_up, color=color.new(color.white, 30), textcolor=color.red, size=size.large)
	sl_bull_triggered := true
	trade_ended := true
	trade_start := false
	
// Bearish Trend Shift Alerts Label

if (entry_bear)
	label.new(x=bar_index, y=low - offset, text="🔴 Entry Bear", style=label.style_label_up, color=color.new(color.red, 70), textcolor=color.white, size=size.normal)
	trade_start := true
	crossover_bar_index := na
	
if (exit_bear)
    label.new(x=bar_index, y=high + offset, text="Exit Bear\n " + str.tostring(total_exit_percentage, "#.###") + "%", style=label.style_label_down, color=color.new(color.black, 70), textcolor=color.yellow, size=size.large)
	trade_ended := true
	trade_start := false
	crossunder_bar_index := na
	
if (tp_bear)
	label.new(x=bar_index, y=low -  atr_offset, text="Bear TP\n " + str.tostring(total_exit_percentage, "#.###") + "%", style=label.style_label_up, color=color.new(color.white, 30), textcolor=color.green, size=size.large)
	tp_bear_triggered := true
	trade_ended := true
	trade_start := false
	
if (sl_bear)
	label.new(x=bar_index, y=high + atr_offset, text="Bear SL\n " + str.tostring(total_exit_percentage, "#.###") + "%", style=label.style_label_down, color=color.new(color.white, 30), textcolor=color.red, size=size.large)
	sl_bear_triggered := true	
	trade_ended := true
	trade_start := false

// ============================================================== Alerts for Trend Shifts ==============================================================

// Bullish Trend Shift Alerts

alertcondition(entry_bull, "🔵 Entry Bull", message='🔵 Entry Bull')
alertcondition(exit_bull, "🔵 Exit Bull", message='🔵 Exit Bull')
alertcondition(tp_bull, "🔵 TP Bull", message='🔵 TP Bull')
alertcondition(sl_bull, "🔵 SL Bull", message='🔵 SL Bull')
alertcondition(entry_bear, "🔴 Entry Bear", message='🔴 Entry Bear')
alertcondition(exit_bear, "🔴 Exit Bear", message='🔴 Exit Bear')
alertcondition(tp_bear, "🔴 TP Bear", message='🔴 TP Bear')
alertcondition(sl_bear, "🔴 SL Bear", message='🔴 SL Bear')